<?php
/**
 * Osc Receive Tests
 *
 * PHP Version 5
 *
 * @category   Busmaster-Test
 * @package    Server
 * @subpackage Socket
 * @author     Lucas S. Bickel <hairmare@purplehaze.ch>
 * @copyright  2012 Lucas S. Bickel 2012 - Alle Rechte vorbehalten
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link       http://purplehaze.ch
 */

require_once __DIR__.'/../Bootstrap.php';

require_once 'modules/OscReceive/Daemon.php';

/**
 * Test class for OscReceive_Daemon.
 * Generated by PHPUnit on 2012-05-11 at 14:47:46.
 *
 * @category   Busmaster-Test
 * @package    Server
 * @subpackage Socket
 * @author     Lucas S. Bickel <hairmare@purplehaze.ch>
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 * @link       http://purplehaze.ch
 */
class OscReceive_DaemonTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var OscReceive_Daemon
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $dispatchMock = $this->getMock(
            'stdClass',
            array('dispatch')
        );
        $loggerMock = $this->getMock(
            'stdClass',
            array('log', 'debug')
        );
        $oscMock = $this->getMock(
            'stdClass'
        );
        $workPollMock = $this->getMock(
            'stdClass',
            array('poll')
        );

        $this->object = new OscReceive_Daemon(
            $dispatchMock,
            $loggerMock,
            $oscMock,
            $workPollMock
        );

        $this->dispatchMock = $dispatchMock;
        $this->loggerMock = $loggerMock;
        $this->oscMock = $oscMock;
        $this->workPollMock = $workPollMock;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /**
     * test constructor
     *
     * @covers OscReceive_Daemon::__construct
     *
     * @return void
     */
    public function testConstruct()
    {
        $this->dispatchMock
            ->expects($this->never())
            ->method('dispatch');

        $o = new OscReceive_Daemon(
            $this->dispatchMock,
            $this->loggerMock,
            $this->oscMock,
            $this->workPollMock
        );
    }

    /**
     * test start method
     *
     * @covers OscReceive_Daemon::start
     *
     * @return void
     */
    public function testStart()
    {
        $this->dispatchMock
            ->expects($this->once())
            ->method('dispatch')
            ->with($this->equalTo('/daemon/start/'));

        $o = new OscReceive_Daemon(
            $this->dispatchMock,
            $this->loggerMock,
            $this->oscMock,
            $this->workPollMock
        );
    }

    /**
     * test run method
     *
     * @covers OscReceive_Daemon::run
     *
     * @return void
     *
     * @todo Implement testRun().
     */
    public function testRun()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * test startsocket method
     *
     * @covers OscReceive_Daemon::_startSocket
     *
     * @return void
     *
     * @todo Implement testStartSocket().
     */
    public function testStartSocket()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * test runSocket method
     *
     * @covers OscReceive_Daemon::_runSocket
     *
     * @return void
     *
     * @todo Implement testRunSocket().
     */
    public function testRunSocket()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}

